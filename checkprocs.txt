#ifdef DEBUG
static int
procLookup(struct proc *p, struct proc *np)
{
  while (np != NULL) {
    if (np == p) return 1;
    np = np->next;
  }
  return 0;
}

static int
findProc(struct proc *p)
{
  if (procLookup(p, ptable.pLists.free)    != 0) return 1;
  if (procLookup(p, ptable.pLists.embryo)  != 0) return 1;
  if (procLookup(p, ptable.pLists.running) != 0) return 1;
  if (procLookup(p, ptable.pLists.sleep)   != 0) return 1;
  if (procLookup(p, ptable.pLists.zombie)  != 0) return 1;
  for (int i=0; i<=MAXPRIO; i++)
    if (procLookup(p, ptable.pLists.ready[i]) != 0) return 1;

  return 0; // not found
}

// argument 's' is a string to print on not found
static void
checkProcs(const char *file, const char *func, int line)
{
  int found;
  int isholding;
  struct proc *p;

  isholding = holding(&ptable.lock);
  if (!isholding) acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    found = findProc(p);
    if (found) continue;
    cprintf("checkperocs error. Called from %s, %s, @ %d\n", file, func, line);

    panic("Process array and lists inconsistent\n");
  }
  if (!isholding) release(&ptable.lock);
}
#endif